// natural-playwright.js - Adaptado para tu configuraci√≥n
import { test, expect } from '@playwright/test';
import axios from 'axios';
import 'dotenv/config';

class NaturalLanguagePlaywright {
  constructor(options = {}) {
    // Usar tu configuraci√≥n espec√≠fica
    this.apiKey = options.apiKey || process.env.OPENAI_API_KEY || 'ollama';
    this.baseUrl = options.baseUrl || process.env.OPENAI_BASE_URL || 'http://192.168.24.20:11434/v1';
    this.model = options.model || process.env.AI_MODEL || 'llama3:latest';
    this.debug = options.debug || process.env.DEBUG_MODE === 'true';
    this.temperature = options.temperature || parseFloat(process.env.TEMPERATURE) || 0.1;
    this.timeout = options.timeout || parseInt(process.env.TIMEOUT_MS) || 30000;

    if (this.debug) {
      console.log(`ü§ñ Configuraci√≥n IA:
      - URL: ${this.baseUrl}
      - Modelo: ${this.model}
      - Temperatura: ${this.temperature}`);
    }
  }

  async executeNaturalCommand(command, page, testContext = null) {
    if (this.debug) {
      console.log(`\nüéØ Procesando comando: "${command}"`);
    }

    try {
      // 1. Obtener contexto de la p√°gina
      const pageContext = await this.getPageContext(page);
      
      // 2. Generar c√≥digo usando tu Ollama
      const playwrightCode = await this.generatePlaywrightCode(command, pageContext);
      
      // 3. Ejecutar c√≥digo generado
      const result = await this.executeSafeCode(playwrightCode, page, testContext);
      
      if (this.debug) {
        console.log(`‚úÖ Comando ejecutado exitosamente`);
      }
      
      return result;

    } catch (error) {
      console.error(`‚ùå Error ejecutando "${command}":`, error.message);
      throw error;
    }
  }

  async getPageContext(page) {
    try {
      const url = page.url();
      const title = await page.title();
      
      // Obtener elementos principales de la p√°gina
      const buttons = await page.$$eval('button:visible, input[type="button"]:visible, input[type="submit"]:visible', 
        els => els.slice(0, 15).map(el => ({ 
          type: 'button', 
          text: (el.textContent || el.value || '').trim(), 
          id: el.id || null,
          class: el.className || null
        }))
      ).catch(() => []);
      
      const links = await page.$$eval('a:visible', 
        els => els.slice(0, 10).map(el => ({ 
          type: 'link', 
          text: (el.textContent || '').trim(), 
          href: el.href || null
        }))
      ).catch(() => []);
      
      const inputs = await page.$$eval('input:visible, textarea:visible, select:visible', 
        els => els.slice(0, 10).map(el => ({ 
          type: 'input', 
          inputType: el.type || el.tagName.toLowerCase(), 
          placeholder: el.placeholder || null,
          name: el.name || null,
          id: el.id || null
        }))
      ).catch(() => []);

      return {
        url,
        title,
        elements: [...buttons, ...links, ...inputs].filter(el => el.text || el.placeholder || el.id)
      };
    } catch (error) {
      console.warn('Error obteniendo contexto:', error.message);
      return { 
        url: page.url(), 
        title: await page.title().catch(() => 'Sin t√≠tulo'), 
        elements: [] 
      };
    }
  }

  async generatePlaywrightCode(command, context) {
    const systemPrompt = this.buildSystemPrompt(context);
    
    try {
      const response = await axios.post(`${this.baseUrl}/chat/completions`, {
        model: this.model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: `Convierte este comando a c√≥digo Playwright: "${command}"` }
        ],
        temperature: this.temperature,
        max_tokens: 400,
        stream: false
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: this.timeout
      });

      const aiResponse = response.data.choices[0].message.content;
      return this.extractCode(aiResponse);

    } catch (error) {
      console.error('Error llamando a IA:', error.message);
      // Fallback a acciones b√°sicas si la IA falla
      return this.generateBasicAction(command);
    }
  }

  buildSystemPrompt(context) {
    const elementsInfo = context.elements.length > 0 
      ? `\nElementos disponibles en la p√°gina:\n${JSON.stringify(context.elements.slice(0, 20), null, 2)}`
      : '\nNo se encontraron elementos espec√≠ficos en la p√°gina.';

    return `Eres un experto en automatizaci√≥n web con Playwright. Convierte comandos en espa√±ol a c√≥digo JavaScript ejecutable.

CONTEXTO ACTUAL:
- URL: ${context.url}
- T√≠tulo: ${context.title}${elementsInfo}

REGLAS ESTRICTAS:
1. Responde SOLO con c√≥digo JavaScript, sin explicaciones
2. No uses markdown ni bloques de c√≥digo
3. Usa await para operaciones as√≠ncronas
4. Para retornar valores usa 'return'
5. Usa selectores robustos basados en texto visible

PATRONES DE C√ìDIGO:
- Click: await page.click('button:has-text("Texto del bot√≥n")');
- Escribir: await page.fill('input[placeholder="Email"]', 'valor');
- Navegar: await page.goto('https://url.com');
- Obtener texto: return await page.textContent('selector');
- Esperar: await page.waitForSelector('selector:visible');
- Verificar: const text = await page.textContent('selector'); if (!text.includes('esperado')) throw new Error('No encontrado');

SELECTORES PREFERIDOS:
- Botones: 'button:has-text("texto")'
- Enlaces: 'a:has-text("texto")'
- Inputs: 'input[placeholder="texto"]' o 'input[name="campo"]'
- Por texto: '*:has-text("texto exacto")'

Genera c√≥digo que funcione con la p√°gina actual.`;
  }

  extractCode(aiResponse) {
    let code = aiResponse.trim();
    
    // Limpiar respuesta de la IA
    code = code.replace(/```javascript|```js|```/g, '');
    code = code.replace(/^.*?await/m, 'await'); // Empezar desde el primer await
    
    // Filtrar l√≠neas de c√≥digo v√°lidas
    const lines = code.split('\n')
      .map(line => line.trim())
      .filter(line => 
        line && 
        !line.startsWith('//') && 
        !line.startsWith('/*') &&
        !line.includes('Explicaci√≥n') &&
        !line.includes('Este c√≥digo')
      );
    
    return lines.join('\n');
  }

  generateBasicAction(command) {
    const cmd = command.toLowerCase();
    
    // Patrones b√°sicos para casos comunes
    if (cmd.includes('clic') || cmd.includes('hacer clic')) {
      const match = cmd.match(/["']([^"']+)["']|en (.+)/);
      const target = match ? (match[1] || match[2]) : 'button';
      return `await page.click('button:has-text("${target}"), a:has-text("${target}")');`;
    }
    
    if (cmd.includes('escribir') || cmd.includes('llenar')) {
      const textMatch = cmd.match(/["']([^"']+)["']/);
      const text = textMatch ? textMatch[1] : '';
      return `await page.fill('input:visible', '${text}');`;
    }
    
    if (cmd.includes('navegar') || cmd.includes('ir a')) {
      const urlMatch = cmd.match(/https?:\/\/[^\s]+/) || cmd.match(/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/);
      const url = urlMatch ? urlMatch[0] : 'about:blank';
      return `await page.goto('${url.startsWith('http') ? url : 'https://' + url}');`;
    }
    
    if (cmd.includes('obtener') || cmd.includes('t√≠tulo')) {
      return 'return await page.title();';
    }
    
    // Acci√≥n gen√©rica
    return `await page.waitForLoadState('networkidle');`;
  }

  async executeSafeCode(code, page, testContext) {
    if (this.debug) {
      console.log(`üîß Ejecutando c√≥digo:\n${code}`);
    }

    const safeCode = `
      (async function(page, test, expect) {
        try {
          ${code}
        } catch (error) {
          console.error('Error en c√≥digo generado:', error.message);
          throw error;
        }
      })
    `;

    try {
      const executableFunction = eval(safeCode);
      return await executableFunction(page, testContext, expect);
    } catch (error) {
      if (this.debug) {
        console.error('Error ejecutando c√≥digo:', error.message);
      }
      throw error;
    }
  }
}

// Funci√≥n principal para usar en tests
async function auto(command, { page, test }) {
  const nlp = new NaturalLanguagePlaywright();
  return await nlp.executeNaturalCommand(command, page, test);
}

export { NaturalLanguagePlaywright, auto };